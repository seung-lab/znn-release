[parameters]
#[general]
# specification file of network architecture
fnet_spec = ../networks/N4_A_even.znn
# file of data spec
fdata_spec = ../dataset/Piriform/dataset.spec
# number of threads. if 0, the thread number will be equal to
# the number of concurrent threads supported by the implementation.
# will use maximum cores when num_threads<=0
num_threads = 0
# data type of arrays: float32 or float64
dtype = float32
# type of network output: boundary or affinity
out_type = affinity
# Whether to record config and log files
logging = no

#[train]
# output size: z,y,x
train_outsz = 1,5,5
# cost function: square_loss, binomial_cross_entropy, softmax_loss, auto
# auto mode will match the out_type: boundary-softmax, affinity-binomial
cost_fn = auto
# learning rate
eta = 0.01
# annealing factor
anneal_factor = 0.997
# saved network name
train_net_prefix = ../testsuit/affinity/net
# sample ID range for train
# example: 2-3,7
train_range = 2
# sample ID range for validate/test during training
test_range = 1
# momentum
momentum = 0.9
# weight decay
weight_decay = 0

# mode: fft, direct, optimize
# if optimize, znn will choose direct convolution or fft for each layer.
# optimize will get the best performance, but it takes a few minutes at the beginning.
# it is suggested to use fft for fast testing and forward pass, and use optimize for long-time training
train_conv_mode = fft
forward_conv_mode = fft

# transform data to enrich training data augmentation?
is_data_aug = yes
# mirror the boundary to get a full size output
is_bd_mirror = yes
# balance the boundary and non-boundary voxel
# global: compute the weight in the whole image stack
# patch: compute the balance weight for each patch
rebalance_mode = patch

# use malis weighting of gradient?
is_malis = no
# type of malis normalization:
# none: no normalization,
# frac: segment fractional normalization
# num : normalized by N (number of nonboundary voxels)
# pair: normalized by N*(N-1)
malis_norm_type = none

# whether to use real time visualization
is_visual = no
# standard IO
is_stdio = yes
# debug mode
is_debug = yes
# check the patches
is_check = yes

# number of iteration per show
Num_iter_per_show = 1
# number of iteration per validation/test during training
Num_iter_per_test = 50
# number of iteration per learning rate annealing
Num_iter_per_annealing = 100
# number of forward pass of each test
test_num = 10
# number of iteration per save
Num_iter_per_save = 1
# maximum iteration
Max_iter = 150000

#[forward]
# image for forward pass
forward_range = 1
# forward network
forward_net = ../testsuit/affinity/net_current.h5
# output size: z,y,x
forward_outsz = 3,100,100
# output file name prefix
output_prefix = ../testsuit/affinity/out
